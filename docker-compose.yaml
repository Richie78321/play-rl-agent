version: '3'

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    restart: always
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    restart: always
    volumes:
      - kafka_data:/bitnami/kafka
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9093,CLIENT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9093,CLIENT://localhost:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    # This ensures that Kafka can properly unregister itself from ZooKeeper before ZooKeeper stops.
    depends_on:
      - zookeeper
  postgres:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=playdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres.sql:/docker-entrypoint-initdb.d/postgres.sql:ro
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    ports:
      - "8081:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@pgadmin.com
      - PGADMIN_DEFAULT_PASSWORD=password
    volumes:
      - pgadmin_data:/var/lib/pgadmin
  logstash:
    build:
      dockerfile: ./Logstash.Dockerfile
    restart: always
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    environment:
      - XPACK_MONITORING_ENABLED=false
    depends_on:
      - kafka
  agent-api:
    build:
      context: ./agent-api
    restart: always
  playdata-api:
    build:
      context: ./playdata-api
    restart: always
  frontend:
    build:
      context: ./frontend
    restart: always
  proxy:
    image: nginx:latest
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
volumes:
  kafka_data:
  zookeeper_data:
  postgres_data:
  pgadmin_data: